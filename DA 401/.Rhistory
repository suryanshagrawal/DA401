lerner.df$date = as.Date(strptime(lerner.df$t, "%m/%d/%Y"))
# Create variables
lerner.df <- lerner.df %>%
mutate(OE = TNIE - PE,
Cost = IE + PE + OE,
W1 = IE/Deposit,
W2 = PE/Asset,
W3 = OE/Asset,
e_a = Equity/Asset,
loan_a = Loan_A/100,
npl_loan = NPL_Loan/100,
roa = ROA/100,
w1 = log(W1),
w2 = log(W2),
w3 = log(W3),
c = log(Cost),
a = log(Asset),
w1_sq = w1^2,
w2_sq = w2^2,
w3_sq = w3^2,
a_sq = a^2,
w1_a = w1*a,
w2_a = w2*a,
w3_a = w3*a,
w12 = w1*w2,
w13 = w1*w3,
w23 = w2*w3,
gdp = log(GDP),
ffr = log(FFR),
ur = log(UR),
roa_mean = rollapply(roa, width = 8, FUN = mean, fill = NA, align = "right"),
roa_sd = rollapply(roa, width = 8, FUN = sd, fill = NA, align = "right"),
z = (e_a + roa_mean)/roa_sd)
# Select the date range
start_date <- as.Date("0004-03-31")
end_date <- as.Date("0023-12-31")
lerner.df1 <- lerner.df[lerner.df$date >= start_date & lerner.df$date <= end_date, ]
# Translog cost function
model1 = lm(c ~ w1 + w2 + w3 + a + w1_sq + w2_sq + w3_sq + a_sq +
w1_a + w2_a + w3_a + w12 + w13 + w23, data = lerner.df1)
summary(model1)
stargazer(model1, type = "html", out = "fullmodel.doc")
# Extract coefficients from the model
coefficients <- coef(model1)
# Automate calculation of elas and Lerner index
lerner.df1 <- lerner.df1 %>%
mutate(
elas = coefficients["a"] + 2 * coefficients["a_sq"] * a +
coefficients["w1_a"] * w1 + coefficients["w2_a"] * w2 +
coefficients["w3_a"] * w3,
Lerner = abs(1 - elas * (Cost / Revenue))
)
# Compute the Lerner index
#model1
#lerner.df1 <- lerner.df1 %>%
# mutate(elas = 2.030261  + 2*-0.149318*a + -0.130482*w1 + -0.181550 *w2 + -0.255470 *w3,
#       Lerner = 1 - elas*(Cost/Revenue))
# Regression 1: Z & Lerner (i) with the Lerner index as the only independent variable
Model1 = lm(z~Lerner, data = lerner.df1)
summary(Model1)
# Regression 2: Z & Lerner (ii) with control variables added
Model2 = lm(z~Lerner + e_a + loan_a+ npl_loan + gdp + ur + ffr + CPI, data = lerner.df1)
summary(Model2)
# Regression 3: Z & Lerner & learner^2 (iii) with control variables added
lerner.df1$Lerner_sq = lerner.df1$Lerner * lerner.df1$Lerner
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + gdp + ur + ffr + CPI, data = lerner.df1)
summary(Model3)
# Create a time series data set of Z-score and Lerner index from the dataframe.
lerner.ts <- ts(lerner.df1[, c("z", "Lerner")], start = 2004, frequency = 4)
# Plot the results
plot(lerner.ts, main = "Z-score & Lerner index - Bank of America (2004 to 2023)")
#
stargazer(Model1, Model2, Model3, type = "html", out = "modeloutput2.doc")
# Export cleaned data
write.csv(lerner.df1, "lerner.full.data.csv")
########################## END ##########################
install.packages("pacman")
pacman::p_load(zoo, dplyr, readxl, readr, stringr, data.table, stargazer)
lerner.df <- read.csv("/Users/suryanshagrawal/Library/CloudStorage/GoogleDrive-agrawa_s1@denison.edu/My Drive/Classes/Fall 2024/ECON 440/Final Project/BAC.Learner.csv")
lerner.df$date = as.Date(strptime(lerner.df$t, "%m/%d/%Y"))
lerner.df <- lerner.df %>%
mutate(OE = TNIE - PE,
Cost = IE + PE + OE,
W1 = IE/Deposit,
W2 = PE/Asset,
W3 = OE/Asset,
e_a = Equity/Asset,
loan_a = Loan_A/100,
npl_loan = NPL_Loan/100,
roa = ROA/100,
w1 = log(W1),
w2 = log(W2),
w3 = log(W3),
c = log(Cost),
a = log(Asset),
w1_sq = w1^2,
w2_sq = w2^2,
w3_sq = w3^2,
a_sq = a^2,
w1_a = w1*a,
w2_a = w2*a,
w3_a = w3*a,
w12 = w1*w2,
w13 = w1*w3,
w23 = w2*w3,
gdp = log(GDP),
ffr = log(FFR),
ur = log(UR),
roa_mean = rollapply(roa, width = 8, FUN = mean, fill = NA, align = "right"),
roa_sd = rollapply(roa, width = 8, FUN = sd, fill = NA, align = "right"),
z = (e_a + roa_mean)/roa_sd)
start_date <- as.Date("0004-03-31")
end_date <- as.Date("0023-12-31")
lerner.df1 <- lerner.df[lerner.df$date >= start_date & lerner.df$date <= end_date, ]
model1 = lm(c ~ w1 + w2 + w3 + a + w1_sq + w2_sq + w3_sq + a_sq +
w1_a + w2_a + w3_a + w12 + w13 + w23, data = lerner.df1)
summary(model1)
stargazer(model1, type = "html", out = "fullmodel.doc")
# Extract coefficients from the model
coefficients <- coef(model1)
# Automate calculation of elas and Lerner index
lerner.df1 <- lerner.df1 %>%
mutate(
elas = coefficients["a"] + 2 * coefficients["a_sq"] * a +
coefficients["w1_a"] * w1 + coefficients["w2_a"] * w2 +
coefficients["w3_a"] * w3,
Lerner = abs(1 - elas * (Cost / Revenue))
)
Model1 = lm(z~Lerner, data = lerner.df1)
summary(Model1)
Model2 = lm(z~Lerner + e_a + loan_a+ npl_loan + gdp + ur + ffr + CPI, data = lerner.df1)
summary(Model2)
lerner.df1$Lerner_sq = lerner.df1$Lerner * lerner.df1$Lerner
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + gdp + ur + ffr + CPI, data = lerner.df1)
summary(Model3)
lerner.ts <- ts(lerner.df1[, c("z", "Lerner")], start = 2004, frequency = 4)
plot(lerner.ts, main = "Z-score & Lerner index - Bank of America (2004 to 2023)")
#
stargazer(Model1, Model2, Model3, type = "html", out = "modeloutput2.doc")
# Export cleaned data
write.csv(lerner.df1, "lerner.full.data.csv")
# Automate calculation of elas and Lerner index
lerner.df1 <- lerner.df1 %>%
mutate(
elas = coefficients["a"] + 2 * coefficients["a_sq"] * a +
coefficients["w1_a"] * w1 + coefficients["w2_a"] * w2 +
coefficients["w3_a"] * w3,
Lerner = abs(1 - elas * (Cost / Revenue))
)
Model1 = lm(z~Lerner, data = lerner.df1)
summary(Model1)
Model2 = lm(z~Lerner + e_a + loan_a+ npl_loan + gdp + ur + ffr + CPI, data = lerner.df1)
summary(Model2)
lerner.df1$Lerner_sq = lerner.df1$Lerner * lerner.df1$Lerner
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + gdp + ur + ffr + CPI, data = lerner.df1)
summary(Model3)
lerner.ts <- ts(lerner.df1[, c("z", "Lerner")], start = 2004, frequency = 4)
plot(lerner.ts, main = "Z-score & Lerner index - Bank of America (2004 to 2023)")
#
stargazer(Model1, Model2, Model3, type = "html", out = "modeloutput2.doc")
# Export cleaned data
write.csv(lerner.df1, "lerner.full.data.csv")
########################## END ##########################
# clear all objects including hidden objects
rm(list = ls(all.names = TRUE))
# Or remove individual objects
rm(lerner.df1)
# Install packages
install.packages("pacman")
pacman::p_load(zoo, dplyr, readxl, readr, stringr, data.table, stargazer)
# Import data
lerner.df <- read.csv("/Users/suryanshagrawal/Library/CloudStorage/GoogleDrive-agrawa_s1@denison.edu/My Drive/Classes/Fall 2024/ECON 440/Final Project/BAC.Learner.csv")
# Convert the format of date from "string, character" to "Date" format
lerner.df$date = as.Date(strptime(lerner.df$t, "%m/%d/%Y"))
# Create variables
lerner.df <- lerner.df %>%
mutate(OE = TNIE - PE,
Cost = IE + PE + OE,
W1 = IE/Deposit,
W2 = PE/Asset,
W3 = OE/Asset,
e_a = Equity/Asset,
loan_a = Loan_A/100,
npl_loan = NPL_Loan/100,
roa = ROA/100,
w1 = log(W1),
w2 = log(W2),
w3 = log(W3),
c = log(Cost),
a = log(Asset),
w1_sq = w1^2,
w2_sq = w2^2,
w3_sq = w3^2,
a_sq = a^2,
w1_a = w1*a,
w2_a = w2*a,
w3_a = w3*a,
w12 = w1*w2,
w13 = w1*w3,
w23 = w2*w3,
roa_mean = rollapply(roa, width = 8, FUN = mean, fill = NA, align = "right"),
roa_sd = rollapply(roa, width = 8, FUN = sd, fill = NA, align = "right"),
z = (e_a + roa_mean)/roa_sd)
# Select the date range
start_date <- as.Date("0004-03-31")
end_date <- as.Date("0023-12-31")
lerner.df1 <- lerner.df[lerner.df$date >= start_date & lerner.df$date <= end_date, ]
# Translog cost function
model1 = lm(c ~ w1 + w2 + w3 + a + w1_sq + w2_sq + w3_sq + a_sq +
w1_a + w2_a + w3_a + w12 + w13 + w23, data = lerner.df1)
summary(model1)
stargazer(model1, type = "html", out = "fullmodel.doc")
# Extract coefficients from the model
coefficients <- coef(model1)
# Automate calculation of elas and Lerner index
lerner.df1 <- lerner.df1 %>%
mutate(
elas = coefficients["a"] + 2 * coefficients["a_sq"] * a +
coefficients["w1_a"] * w1 + coefficients["w2_a"] * w2 +
coefficients["w3_a"] * w3,
Lerner = abs(1 - elas * (Cost / Revenue))
)
# Compute the Lerner index
#model1
#lerner.df1 <- lerner.df1 %>%
# mutate(elas = 2.030261  + 2*-0.149318*a + -0.130482*w1 + -0.181550 *w2 + -0.255470 *w3,
#       Lerner = 1 - elas*(Cost/Revenue))
# Regression 1: Z & Lerner (i) with the Lerner index as the only independent variable
Model1 = lm(z~Lerner, data = lerner.df1)
summary(Model1)
# Regression 2: Z & Lerner (ii) with control variables added
Model2 = lm(z~Lerner + e_a + loan_a+ npl_loan + GDP + UR + FFR + CPI, data = lerner.df1)
summary(Model2)
# Regression 3: Z & Lerner & learner^2 (iii) with control variables added
lerner.df1$Lerner_sq = lerner.df1$Lerner * lerner.df1$Lerner
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + GDP + UR + FFR CPI, data = lerner.df1)
install.packages("pacman")
pacman::p_load(zoo, dplyr, readxl, readr, stringr, data.table, stargazer)
lerner.df <- read.csv("/Users/suryanshagrawal/Library/CloudStorage/GoogleDrive-agrawa_s1@denison.edu/My Drive/Classes/Fall 2024/ECON 440/Final Project/BAC.Learner.csv")
lerner.df$date = as.Date(strptime(lerner.df$t, "%m/%d/%Y"))
lerner.df <- lerner.df %>%
mutate(OE = TNIE - PE,
Cost = IE + PE + OE,
W1 = IE/Deposit,
W2 = PE/Asset,
W3 = OE/Asset,
e_a = Equity/Asset,
loan_a = Loan_A/100,
npl_loan = NPL_Loan/100,
roa = ROA/100,
w1 = log(W1),
w2 = log(W2),
w3 = log(W3),
c = log(Cost),
a = log(Asset),
w1_sq = w1^2,
w2_sq = w2^2,
w3_sq = w3^2,
a_sq = a^2,
w1_a = w1*a,
w2_a = w2*a,
w3_a = w3*a,
w12 = w1*w2,
w13 = w1*w3,
w23 = w2*w3,
roa_mean = rollapply(roa, width = 8, FUN = mean, fill = NA, align = "right"),
roa_sd = rollapply(roa, width = 8, FUN = sd, fill = NA, align = "right"),
z = (e_a + roa_mean)/roa_sd)
start_date <- as.Date("0004-03-31")
end_date <- as.Date("0023-12-31")
lerner.df1 <- lerner.df[lerner.df$date >= start_date & lerner.df$date <= end_date, ]
model1 = lm(c ~ w1 + w2 + w3 + a + w1_sq + w2_sq + w3_sq + a_sq +
w1_a + w2_a + w3_a + w12 + w13 + w23, data = lerner.df1)
summary(model1)
stargazer(model1, type = "html", out = "fullmodel.doc")
# Extract coefficients from the model
coefficients <- coef(model1)
# Automate calculation of elas and Lerner index
lerner.df1 <- lerner.df1 %>%
mutate(
elas = coefficients["a"] + 2 * coefficients["a_sq"] * a +
coefficients["w1_a"] * w1 + coefficients["w2_a"] * w2 +
coefficients["w3_a"] * w3,
Lerner = abs(1 - elas * (Cost / Revenue))
)
Model1 = lm(z~Lerner, data = lerner.df1)
summary(Model1)
Model2 = lm(z~Lerner + e_a + loan_a+ npl_loan + GDP + UR + FFR + CPI, data = lerner.df1)
summary(Model2)
lerner.df1$Lerner_sq = lerner.df1$Lerner * lerner.df1$Lerner
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + GDP + UR + FFR CPI, data = lerner.df1)
summary(Model3)
lerner.ts <- ts(lerner.df1[, c("z", "Lerner")], start = 2004, frequency = 4)
Model2 = lm(z~Lerner + e_a + loan_a+ npl_loan + GDP + UR + FFR + CPI, data = lerner.df1)
summary(Model2)
lerner.df1$Lerner_sq = lerner.df1$Lerner * lerner.df1$Lerner
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + GDP + UR + FFR CPI, data = lerner.df1)
Model3 = lm(z~Lerner + Lerner_sq + e_a + loan_a + npl_loan + GDP + UR + FFR + CPI, data = lerner.df1)
summary(Model3)
lerner.ts <- ts(lerner.df1[, c("z", "Lerner")], start = 2004, frequency = 4)
plot(lerner.ts, main = "Z-score & Lerner index - Bank of America (2004 to 2023)")
#
stargazer(Model1, Model2, Model3, type = "html", out = "modeloutput2.doc")
# Export cleaned data
write.csv(lerner.df1, "lerner.full.data.csv")
# clear all objects including hidden objects
rm(list = ls(all.names = TRUE))
# Or remove individual objects
rm(lerner.df1)
# Install packages
install.packages("pacman")
install.packages("pacman")
# clear all objects including hidden objects
rm(list = ls(all.names = TRUE))
# Or remove individual objects
rm(lerner.df1)
# Install packages
install.packages("pacman")
install.packages("pacman")
pacman::p_load(zoo, dplyr, readxl, readr, stringr, data.table, stargazer)
# Import data
lerner.df <- read_excel("G:\My Drive\DA 401\Prelim Analysis.xlsm", sheet = "main")
# Import data
lerner.df <- read_excel("G:/My Drive/DA 401/Prelim Analysis.xlsm", sheet = "main")
View(lerner.df)
View(lerner.df)
lerner.df$date = as.Date(strptime(lerner.df$Date, "%m/%d/%Y"))
View(lerner.df)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO +
# Quadratic terms
I(PX_TO_BOOK_RATIO^2) + I(VOLATILITY_30D^2) +
I(TOT_LOAN_TO_TOT_DPST^2) + I(BS_TOT_ASSET^2) +
I(RETURN_COM_EQY^2) + I(RETURN_ON_ASSET^2) +
I(NPLS_TO_TOTAL_LOANS^2) + I(GROWTH_IN_TOT_LOAN^2) +
I(NON_INT_INC^2) + I(DVD_PAYOUT_RATIO^2) +
# Interaction terms
PX_TO_BOOK_RATIO:VOLATILITY_30D +
PX_TO_BOOK_RATIO:TOT_LOAN_TO_TOT_DPST +
PX_TO_BOOK_RATIO:BS_TOT_ASSET +
VOLATILITY_30D:TOT_LOAN_TO_TOT_DPST +
VOLATILITY_30D:BS_TOT_ASSET +
TOT_LOAN_TO_TOT_DPST:BS_TOT_ASSET,
data = df)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO +
# Quadratic terms
I(PX_TO_BOOK_RATIO^2) + I(VOLATILITY_30D^2) +
I(TOT_LOAN_TO_TOT_DPST^2) + I(BS_TOT_ASSET^2) +
I(RETURN_COM_EQY^2) + I(RETURN_ON_ASSET^2) +
I(NPLS_TO_TOTAL_LOANS^2) + I(GROWTH_IN_TOT_LOAN^2) +
I(NON_INT_INC^2) + I(DVD_PAYOUT_RATIO^2) +
# Interaction terms
PX_TO_BOOK_RATIO:VOLATILITY_30D +
PX_TO_BOOK_RATIO:TOT_LOAN_TO_TOT_DPST +
PX_TO_BOOK_RATIO:BS_TOT_ASSET +
VOLATILITY_30D:TOT_LOAN_TO_TOT_DPST +
VOLATILITY_30D:BS_TOT_ASSET +
TOT_LOAN_TO_TOT_DPST:BS_TOT_ASSET,
data = lerner.df)
summary(model1)
summary(model1)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO)
summary(model1)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO)
summary(model1)
model2 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO +
# Quadratic terms
I(PX_TO_BOOK_RATIO^2) + I(VOLATILITY_30D^2) +
I(TOT_LOAN_TO_TOT_DPST^2) + I(BS_TOT_ASSET^2) +
I(RETURN_COM_EQY^2) + I(RETURN_ON_ASSET^2) +
I(NPLS_TO_TOTAL_LOANS^2) + I(GROWTH_IN_TOT_LOAN^2) +
I(NON_INT_INC^2) + I(DVD_PAYOUT_RATIO^2) +
# Interaction terms
PX_TO_BOOK_RATIO:VOLATILITY_30D +
PX_TO_BOOK_RATIO:TOT_LOAN_TO_TOT_DPST +
PX_TO_BOOK_RATIO:BS_TOT_ASSET +
VOLATILITY_30D:TOT_LOAN_TO_TOT_DPST +
VOLATILITY_30D:BS_TOT_ASSET +
TOT_LOAN_TO_TOT_DPST:BS_TOT_ASSET,
data = lerner.df)
summary(model2)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO)
# Import data
lerner.df <- read_excel("G:/My Drive/DA 401/Prelim Analysis.xlsm", sheet = "main")
lerner.df$date = as.Date(strptime(lerner.df$Date, "%m/%d/%Y"))
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO)
summary(model1)
model2 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO +
# Quadratic terms
I(PX_TO_BOOK_RATIO^2) + I(VOLATILITY_30D^2) +
I(TOT_LOAN_TO_TOT_DPST^2) + I(BS_TOT_ASSET^2) +
I(RETURN_COM_EQY^2) + I(RETURN_ON_ASSET^2) +
I(NPLS_TO_TOTAL_LOANS^2) + I(GROWTH_IN_TOT_LOAN^2) +
I(NON_INT_INC^2) + I(DVD_PAYOUT_RATIO^2) +
# Interaction terms
PX_TO_BOOK_RATIO:VOLATILITY_30D +
PX_TO_BOOK_RATIO:TOT_LOAN_TO_TOT_DPST +
PX_TO_BOOK_RATIO:BS_TOT_ASSET +
VOLATILITY_30D:TOT_LOAN_TO_TOT_DPST +
VOLATILITY_30D:BS_TOT_ASSET +
TOT_LOAN_TO_TOT_DPST:BS_TOT_ASSET,
data = lerner.df)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO, data = lerner.df)
summary(model1)
model2 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO +
# Quadratic terms
I(PX_TO_BOOK_RATIO^2) + I(VOLATILITY_30D^2) +
I(TOT_LOAN_TO_TOT_DPST^2) + I(BS_TOT_ASSET^2) +
I(RETURN_COM_EQY^2) + I(RETURN_ON_ASSET^2) +
I(NPLS_TO_TOTAL_LOANS^2) + I(GROWTH_IN_TOT_LOAN^2) +
I(NON_INT_INC^2) + I(DVD_PAYOUT_RATIO^2) +
# Interaction terms
PX_TO_BOOK_RATIO:VOLATILITY_30D +
PX_TO_BOOK_RATIO:TOT_LOAN_TO_TOT_DPST +
PX_TO_BOOK_RATIO:BS_TOT_ASSET +
VOLATILITY_30D:TOT_LOAN_TO_TOT_DPST +
VOLATILITY_30D:BS_TOT_ASSET +
TOT_LOAN_TO_TOT_DPST:BS_TOT_ASSET,
data = lerner.df)
summary(model2)
model1 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO, data = lerner.df)
summary(model1)
model2 <- lm(CET1 ~ PX_TO_BOOK_RATIO + VOLATILITY_30D + TOT_LOAN_TO_TOT_DPST +
BS_TOT_ASSET + RETURN_COM_EQY + RETURN_ON_ASSET +
NPLS_TO_TOTAL_LOANS + GROWTH_IN_TOT_LOAN +
NON_INT_INC + DVD_PAYOUT_RATIO +
# Quadratic terms
I(PX_TO_BOOK_RATIO^2) + I(VOLATILITY_30D^2) +
I(TOT_LOAN_TO_TOT_DPST^2) + I(BS_TOT_ASSET^2) +
I(RETURN_COM_EQY^2) + I(RETURN_ON_ASSET^2) +
I(NPLS_TO_TOTAL_LOANS^2) + I(GROWTH_IN_TOT_LOAN^2) +
I(NON_INT_INC^2) + I(DVD_PAYOUT_RATIO^2) +
# Interaction terms
PX_TO_BOOK_RATIO:VOLATILITY_30D +
PX_TO_BOOK_RATIO:TOT_LOAN_TO_TOT_DPST +
PX_TO_BOOK_RATIO:BS_TOT_ASSET +
VOLATILITY_30D:TOT_LOAN_TO_TOT_DPST +
VOLATILITY_30D:BS_TOT_ASSET +
TOT_LOAN_TO_TOT_DPST:BS_TOT_ASSET,
data = lerner.df)
summary(model2)
stargazer(model1, model2, type = "html", out = "modeloutput.doc")
stargazer(model1, model2, type = "html", out = "mot.doc")
stargazer(model1, model2, type = "html", out = "mot.doc")
setwd("G:/My Drive/DA 401")
stargazer(model1, model2, type = "html", out = "mot.doc")
install.packages("ggplot2")
library(ggplot2)
ggplot(lerner.df, aes(x = RETURN_ON_ASSET, y = CET1)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red") +
labs(title = "Return on Assets vs CET1", x = "Return on Assets", y = "CET1") +
theme_minimal()
ggplot(lerner.df, aes(x = TOT_LOAN_TO_TOT_DPST, y = CET1)) +
geom_point(color = "green") +
geom_smooth(method = "lm", formula = y ~ x, color = "orange") +
labs(title = "Loan-to-Deposit Ratio vs CET1", x = "Loan-to-Deposit Ratio", y = "CET1") +
theme_minimal()
ggplot(lerner.df, aes(x = RETURN_ON_ASSET, y = CET1)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red") +
labs(title = "Return on Assets vs CET1", x = "Return on Assets", y = "CET1") +
theme_minimal()
ggplot(lerner.df, aes(x = TOT_LOAN_TO_TOT_DPST, y = CET1)) +
geom_point(color = "green") +
geom_smooth(method = "lm", formula = y ~ x, color = "orange") +
labs(title = "Loan-to-Deposit Ratio vs CET1", x = "Loan-to-Deposit Ratio", y = "CET1") +
theme_minimal()
# Assuming your data is stored in 'lerner.df'
ggplot(lerner.df, aes(x = RETURN_ON_ASSET, y = CET1, color = Equity)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), aes(group = Equity), se = FALSE) +
labs(title = "Return on Assets vs CET1 by Bank", x = "Return on Assets", y = "CET1") +
theme_minimal()
# Assuming your data is stored in 'lerner.df'
ggplot(lerner.df, aes(x = RETURN_ON_ASSET, y = CET1, color = Equity)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), aes(group = Equity), se = FALSE) +
labs(title = "Return on Assets vs CET1 by Bank", x = "Return on Assets", y = "CET1") +
theme_bw()
